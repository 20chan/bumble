program = sentence*
sentence := if | match | while | return | yield | skip | break | declare_var | declare_func | assign | call
sentences := ("{" {sentence}* "}" | sentence)
if := "if" "(" expr ")" sentences
    {"else" "if" "(" expr ")" sentences}*
    {"else" sentences}?
match := "match" "(" expr ")" "{" {expr ":" sentences} "}"
while := "while" "(" expr ")" sentence
return := "return" expr ";"
yield := expr ";"
skip := "skip" expr ";"
break := "break" ";"
declare_var := "var" identifier "=" expr ";"
declare_func := "func" identifier arg_list "{" sentence* "}"
arg_list := "(" (identifier {"," identifier}) ")"
assign := lexpr "=" expr;
lexpr := (identifier | "(" lexpr ")") (("[" expr "]") | ("." identifier))*
call := expr ";"
expr := xor_expr ('|' xor_expr)
xor_expr :=
atom_expr := (identifier | literal) {'(' arg_list ')' | '[' arg_list ']' | '.' identifier}
literal := simple_literal | array_literal | dict_literal
simple_literal  := identifier | NUMBER | STRING+ | "True" | "False"
array_literal := "[" arg_list "]"
dict_literal := "{" expr ":" expr {"," expr ":" expr} "}"
identifier := NAME