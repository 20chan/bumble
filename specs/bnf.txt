<statement> := (<sentence> | "{" <sentence>* "}")
<loop_sentence> := <sentence> | "skip" <expr>? ";" | "break" ";" |
<loop_statement> := (<loop_sentence> | "{" <loop_sentence>* "}"
<sentence> := <if> | <while> | <for> | <cond> | <match> | <try> | <enumdef> | <classdef> | <funcdef> | <vardef> | <bind> | <call>

<if> := "if" "(" <expr> ")" <statement>
        ("else" "if" "(" <expr> ")" <statement>)*
        ("else" <statement>)?
<while> := "while" "(" <expr> ")" <loop_statement>
<for> := "for" "(" (<expr> ";" <expr> ";" <expr> | "var" IDENTIFIER "in" <expr>) ")" <loop_statement>
<cond> := "cond" "(" <expr> ")" "{" (<expr> "then" <statement>)* ("otherwise" <statement>)? "}"
<match> := "match" "(" <expr_list> ")" "{" (<literal_type> "then" <statement>)* "}"
<literal_type> := LITERAL | "_"
<try> := "try" "{" <sentence>* "}"
         ("catch" (<expr> IDENTIFIER?)? "{" <sentence>* "}")*
         ("finally" "{" <sentence>* "}")?
<enumdef> := "enum" IDENTIFIER "{" IDENTIFIER "=" LITERAL ("," IDENTIFIER "=" LITERAL)*"}"
<classdef> := "class" IDENTIFIER (":" IDENTIFIER)? "{" (<funcdef> | <vardef> | <bind>)* "}"
<funcdef> := "func" IDENTIFIER "(" <expr_list> ")" "{" <sentence>* "}"
<vardef> := "var" IDENTIFIER ("=" <expr>)? ";"
<bind> := IDENTIFIER ":=" <expr>

<call> := <expr> ";"
<expr> := <or_expr> ("|>" <or_expr>)? | <lambdef>
<lambdef> := <expr_list> "=>" <expr> | "{" <sentence>* "}"
<or_expr> := <and_expr> ("||" <and_expr>)*
<and_expr> := <xor_expr> ("&&" <xor_expr>)*
<xor_expr> := <shift_expr> ("^" <shift_expr>)*
<shift_expr> := <cmd_expr> (("<<" | ">>") <cmd_expr>)*
<cmd_expr> := <list_expr> (("<" | ">" | "==" | "<=" | ">=" | "!=") <list_expr>)?
<list_expr> := (<expr> ":")* <arith_expr> ("++" <arith_expr>)* (":" <expr>)*
<arith_expr> := <term> (("+" | "-") <term>)*
<term> := <factor> (("*" | "/" | "%") <factor>)*
<factor> := ("+" | "-") <factor> | <power>
<power> := <atom_expr> ["**" <factor>] <trailer>*
<atom_expr> := <tuple> | <list> | <map>
            IDENTIFIER | NUMBER | STRING | NOTHING | TRUE | FALSE

<tuple> := "(" <expr_list> ")"
<list> := "[" (<linq> | <comp> | <notation> | <expr_list>)*) "]"
<linq> := <linq_query>+
<linq_query> := "select" <expr> |
                "from" <expr> "in" <expr> |
                "orderby" <expr> ("ascending" | "descending")? |
                "where" <expr>
<comp> := <expr> "for" <expr_list> "in" <expr> ("if" <expr>)?
<notation> := <arith_expr> ".." <arith_expr> ("by" <arith_expr>)?
<map> := (<expr> ":" <expr>)*

<trailer> := ("(" <expr_list> ")") | ("[" <expr_list> "]") | "." IDENTIFIER
<expr_list> := <expr> ("," <expr>)*
